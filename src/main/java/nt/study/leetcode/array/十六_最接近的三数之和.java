package nt.study.leetcode.array;

import java.util.Arrays;

public class 十六_最接近的三数之和 {
    /**
     * 给你一个长度为 n 的整数数组nums和 一个目标值target。请你从 nums 中选出三个整数，使它们的和与target最接近。
     *
     * 返回这三个数的和。
     *
     * 假定每组输入只存在恰好一个解。
     *
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode.cn/problems/3sum-closest
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     * @param nums
     * @param target
     * @return
     */
    public static int threeSumClosest(int[] nums, int target) {
        int left = 0, right = 0, len = nums.length, best = nums[0]+ nums[1]+ nums[2], temp = 10000000;
        Arrays.sort(nums);
        for(int i = 0; i < len; i++){
            if(i > 0 && nums[i] == nums[i-1]){
                continue;
            }
            left = i + 1;
            right = len - 1;
            while(left < right){
                temp = nums[i] + nums[left] + nums[right];
                if(temp == target){
                    return target;
                }
                if(Math.abs(temp - target) < Math.abs(best - target)){
                    best = temp;
                }
//                // 去重复
//                if(temp < target){
//                    while(left < right && nums[left] == nums[left + 1]){
//                        left ++;
//                    }
////                    left ++;
//                }else{
//                    while(left < right && nums[right] == nums[right - 1]){
//                        right --;
//                    }
////                    right --;
//                }

                if (temp > target) {
                    // 如果和大于 target，移动 c 对应的指针
                    int k0 = right - 1;
                    // 移动到下一个不相等的元素
                    while (left < k0 && nums[k0] == nums[right]) {
                        --k0;
                    }
                    right = k0;
                } else {
                    // 如果和小于 target，移动 b 对应的指针
                    int j0 = left + 1;
                    // 移动到下一个不相等的元素
                    while (j0 < right && nums[j0] == nums[left]) {
                        ++j0;
                    }
                    left = j0;
                }

            }
        }
        return best;
    }


//    public static  int threeSumClosest(int[] nums, int target) {
//        Arrays.sort(nums);
//        int n = nums.length;
//        int best = 10000000;
//
//        // 枚举 a
//        for (int i = 0; i < n; ++i) {
//            // 保证和上一次枚举的元素不相等
//            if (i > 0 && nums[i] == nums[i - 1]) {
//                continue;
//            }
//            // 使用双指针枚举 b 和 c
//            int j = i + 1, k = n - 1;
//            while (j < k) {
//                int sum = nums[i] + nums[j] + nums[k];
//                // 如果和为 target 直接返回答案
//                if (sum == target) {
//                    return target;
//                }
//                // 根据差值的绝对值来更新答案
//                if (Math.abs(sum - target) < Math.abs(best - target)) {
//                    best = sum;
//                }
//                if (sum > target) {
//                    // 如果和大于 target，移动 c 对应的指针
//                    int k0 = k - 1;
//                    // 移动到下一个不相等的元素
//                    while (j < k0 && nums[k0] == nums[k]) {
//                        --k0;
//                    }
//                    k = k0;
//                } else {
//                    // 如果和小于 target，移动 b 对应的指针
//                    int j0 = j + 1;
//                    // 移动到下一个不相等的元素
//                    while (j0 < k && nums[j0] == nums[j]) {
//                        ++j0;
//                    }
//                    j = j0;
//                }
//            }
//        }
//        return best;
//    }

    public static void main(String[] args) {
//        int[] nums = {-996,-639,574,-103,795,968,-630,206,522,-560,-884,-940,112,-182,
//                -634,154,-71,598,-46,-54,788,-100,774,643,280,884,-785,-655,113,225,369,
//                -43,-144,-122,-947,730,-948,394,905,209,402,-228,306,-722,928,268,405,981,
//                -920,709,319,-666,389,543,-231,233,-363,-325,-30,-36,-669,-83,-465,-125,520,
//                435,-522,259,-359,506,903,-700,277,-740,873,424,-967,-551,130,532,378,-855,-348,
//                -185,39,935,-304,568,-742,-380,-691,-217,98,-990,670,286,-13,-278,-539,199,57,-510,
//                -527,-900,668,828,111,-76,145,-533,202,-18,-977,-296,-851,67,-986,313,-457,-243,-589,
//                59,-175,969,-820,-696,-415,-532,390,994,634,18,-82,-180,-852,330,433,-985,683,83,-823,
//                -341,434,-133,-871,-534,-597,44,463,-945,-195,826,701,-895,-553,-812,-444,301,-167,89,6,
//                637,261,-69,423,-354,859,687,-886,672,895,296,338,-33,527,-878,-51,-129,-92,-776,-607,392,
//                -661,-654,-546,535,251,490,-954,-778,-906,-208,431,-305,438,304,618,275,625,-389,235,460,
//                -912,-621,-366,655,447,425,-628,482,86,109,-861,960,-991,-267,122,700,449,94,-901,680,-297,
//                -39,-89,381,-176,-760,-191,585,-594,748,764,-586,541,-577,155,-177,608,-762,-521,454,-507,
//                -438,-786,793,789,796,-336,-121,303,-591,570,582,681,878,343,-858,228,73,380,-220,566,-99,
//                -155,-22,444,-53,426,-206,711,-328,892,332,-870,937,-462,579,-337,19,705,803,-29,-873,723,
//                765,-775,755,-876,-268,-477,-755,-685,205,896,-241,-397,862,-705,10,146,-545,376,-898,-520,
//                244,948,249,811,741,744,-635,321,-199,328,191,-262,875,-856,346,341,222,452,484,17,850,-763,
//                105,502,60,-409,38,-567,47,-269,-818,-424,-151,-631,962,436,-766,-746,976,530,-266,501,-709,
//                -679,780,-421,511,77,-874,366,-664,808,400,942,-344,807,327,-830,349,-556,-418,178,-819,-963,
//                667,365,15,297,583,830,-120,-681,719,-524,988,886,-127,514,-790,827,187,791,464,-302,401,412,
//                -894,262,-883,-834,623,375,-962,-832,904,-183,-387,-711,866,624,-37,-277,65,-244,-564,-55,-374,
//                938,129,379,175,20,185,-332,-719,607,207,-480,-511,-802,-84,775,-235,558,-423,-911,-481,-212,213,
//                704,427,-400,-172,818,766,-721,227,970,230,534,-130,-535,-410,-91,-842,733,997,74,-315,220,-196,679,
//                169,978,437,-150,966,967,-412,48,-846,-256,457,-142,-371,253,-11,-584,547,14,917,371,374,-393,-501,757,
//                69,-420,703,792,210,563,-506,551,-751,-364,-938,-251,-174,124,143,-365,-732,-377,-765,770,-750,-578,242,
//                214,785,834,-788,921,-972,-675,587,37,355,70,-408,888,186,594,-298,-770,555,-25,604,519,-841,737,-287,-637,
//                118,550,-85,-476,-643,-74,-386,-840,-998,285,-548,-270,221,882,-126,106,-431,-767,-650,759,-349,466,-599,-58,
//                732,-541,348,771,188,415,184,193,-131,-583,-34,722,-300,728,-562,629,797,11,-795,-430,-550,809,923,-98,-611,950,
//                -658,-627,-27,448,-113,559,-489,-90,-50,477,-369,-648,101,358,-156,831,-263,851,-435,-602,-932,-14,-728,-329,351,
//                462,787,-547,883,295,-839,900,-303,857,-405,-214,256,-979,133,-616,197,-783,920,-509,-31,-342,633,-47,127,-56,996,
//                934,108,-140,-724,-889,986,333,-811,-645,-160,497,-614,451,-168,-119,139,-758,-81,941,714,-613,-12,889,-339,373,727,
//                -887,131,-505,-258,515,918,234,-582,459,746,843,-845,-993,924,385,-161,893,-975,999,331,192,42,-784,756,-525,-461,-264,
//                -984,-362,-809,616,461,-934,992,915,-865,-504,-340,554,-942,-436,-903,-862,-232,263,-178,779,731,137,521,581,383,577,542,
//                360,-437,898,28,-708,-676,-875,-253,307,-316,-404,738,560,-950,201,595,678,-70,-458,686,752,-844,735,-825,-16,951,747,-75,
//                357,403,509,897,125,440,958,660,-595,300,-515,-777,100,-276,-999,121,813,-937,-210,-139,-931,540,26,-918,495,-450,985,-531,
//                310,910,977,-449,891,716,151,-452,955,874,-239,536,247,-320,-357,-915,3,593,-833,777,-699,-665,496,-233,-427,-68,-731,279,-734,
//                -897,-759,-194,-159,651,239,-656,-500,-72,-106,-821,-640,691,282,528,806,-381,-188,-587,-425,-314,31,-249,-980,739,-829,-221,480,
//                548,657,334,-619,323,-824,-779,252,-909,-579,894,961,164,168,49,-756};

        int [] nums = {-1,2,1,-4};
        int i = threeSumClosest(nums, 1);
        System.out.println(i);
    }
}
